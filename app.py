import os
import warnings
warnings.filterwarnings('ignore')
os.environ['STREAMLIT_SERVER_FILE_WATCHER_TYPE'] = 'none'
import streamlit as st
import torch
import torch.nn as nn
import timm
import numpy as np
from PIL import Image
import cv2
from torchvision import transforms
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import glob
import requests
from datetime import datetime, timedelta
import json

# API Keys and Constants
WEATHER_API_KEY = "2e8cfa89ce124ecca55102846250706"

st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á",
    page_icon="üåø",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_css():
    st.markdown("""
    <style>
    .main {
        background: linear-gradient(135deg, #e8f5e8 0%, #f0f8f0 100%);
    }
    .stTitle {
        color: #2d5a2d !important;
        text-align: center;
        font-family: 'Arial', sans-serif;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .disease-card {
        background: white;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        border-left: 5px solid #4a7c4a;
        margin: 10px 0;
    }
    .healthy-card {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border-left: 5px solid #28a745;
    }
    .disease-severe {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border-left: 5px solid #dc3545;
    }
    .confidence-bar {
        background: #e9ecef;
        border-radius: 10px;
        overflow: hidden;
        height: 20px;
        margin: 5px 0;
    }
    .confidence-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745 0%, #ffc107 50%, #dc3545 100%);
        transition: width 0.3s ease;
    }
    .farmer-emoji {
        font-size: 2em;
        text-align: center;
        margin: 20px 0;
    }
    </style>
    """, unsafe_allow_html=True)

DISEASE_INFO = {
    'CBB': {
        'name': 'CBB (Cassava Bacterial Blight)',
        'thai_name': '‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á',
        'description': '‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏â‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏¢',
        'symptoms': ' ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏â‡πç‡πà‡∏≤‡∏ô‡πç‡πâ‡∏≤ ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ ‡πÉ‡∏ö‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß ‡∏¢‡∏≤‡∏á‡πÑ‡∏´‡∏•‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏≠‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏´‡πâ‡∏á‡∏ï‡∏≤‡∏¢‡∏•‡∏á‡∏°‡∏≤ ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏ô‡πç‡πâ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤',
        'treatment': '‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡∏ä‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô, ‡πÉ‡∏ä‡πâ‡∏ó‡πà‡∏≠‡∏ô‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠',
        'severity': '‡∏™‡∏π‡∏á',
        'emoji': 'üü°',
        'example_images': sorted(glob.glob('streamlit/assets/img/CBB/*.jpg') + glob.glob('streamlit/assets/img/CBB/*.png'))
    },
    'CBSD': {
        'name': 'CBSD (Cassava Brown Streak Disease)',
        'thai_name': '‡πÇ‡∏£‡∏Ñ‡∏•‡∏≤‡∏¢‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á',
        'description': '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ß‡∏£‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ö‡∏ô‡πÉ‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≥‡∏ï‡πâ‡∏ô',
        'symptoms': '‡πÉ‡∏ö‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏â‡∏≤ ‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ö‡∏ô‡∏•‡∏≥‡∏ï‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤‡πÅ‡∏´‡πâ‡∏á‡πÅ‡∏Ç‡πá‡∏á',
        'treatment': '‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä, ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÅ‡∏°‡∏•‡∏á‡∏´‡∏ß‡∏µ‡πà‡∏Ç‡∏≤‡∏ß',
        'severity': '‡∏™‡∏π‡∏á',
        'emoji': 'üçÇ',
        'example_images': sorted(glob.glob('streamlit/assets/img/CBSD/*.jpg') + glob.glob('streamlit/assets/img/CBSD/*.png'))
    },
    'CGM': {
        'name': 'CGM (Cassava Green Mottle)',
        'thai_name': '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ß‡∏£‡∏±‡∏™‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á',
        'description': '‡∏à‡∏∏‡∏î‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ö‡∏ô‡πÉ‡∏ö‡∏ï‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏î‡∏ô‡∏ß‡∏≤‡∏î‡πÑ‡∏ß‡πâ',
        'symptoms': '‡πÉ‡∏ö‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ä‡πâ‡∏≤ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏à‡∏∞‡∏ï‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡πÇ‡∏£‡∏Ñ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á',
        'treatment': '‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä, ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÅ‡∏°‡∏•‡∏á‡∏´‡∏ß‡∏µ‡πà‡∏Ç‡∏≤‡∏ß',
        'severity': '‡∏ï‡πà‡∏≥',
        'emoji': 'ü¶†',
        'example_images': sorted(glob.glob('streamlit/assets/img/CGM/*.jpg') + glob.glob('streamlit/assets/img/CGM/*.png'))
    },
    'CMD': {
        'name': 'CMD (Cassava Mosaic Disease)',
        'thai_name': '‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á',
        'description': '‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏î‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡πÉ‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á ‡∏´‡∏î‡∏•‡∏î‡∏£‡∏π‡∏õ',
        'symptoms': '‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡πÅ‡∏Ñ‡∏£‡∏∞‡πÅ‡∏Å‡∏£‡πá‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ô‡πâ‡∏≠‡∏¢ ‡∏ï‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß',
        'treatment': '‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡πÇ‡∏£‡∏Ñ‡∏û‡∏∑‡∏ä, ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÅ‡∏°‡∏•‡∏á‡∏´‡∏ß‡∏µ‡πà‡∏Ç‡∏≤‡∏ß',
        'severity': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        'emoji': 'üü¢',
        'example_images': sorted(glob.glob('streamlit/assets/img/CMD/*.jpg') + glob.glob('streamlit/assets/img/CMD/*.png'))
    },
    'HEALTHY': {
        'name': 'Healthy',
        'thai_name': '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ',
        'description': '‡∏ï‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ',
        'symptoms': '‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏™‡∏î ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ',
        'treatment': '‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥, ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ',
        'severity': '‡πÑ‡∏°‡πà‡∏°‡∏µ',
        'emoji': '‚úÖ',
        'example_images': sorted(glob.glob('streamlit/assets/img/HEALTY/*.jpg') + glob.glob('streamlit/assets/img/HEALTY/*.png'))
    }
}

class SEBlock(nn.Module):
    def __init__(self, channels, reduction=16):
        super(SEBlock, self).__init__()
        self.fc = nn.Sequential(
            nn.Linear(channels, channels // reduction),
            nn.ReLU(),
            nn.Linear(channels // reduction, channels),
            nn.Sigmoid()
        )
    
    def forward(self, x):
        b, seq_len, c = x.size()
        y = x.mean(dim=1)
        y = self.fc(y)
        return x * y.unsqueeze(1).expand_as(x)

class CrossStageAttention(nn.Module):
    def __init__(self, channels, num_heads=4):
        super().__init__()
        self.num_heads = num_heads
        self.qkv = nn.Linear(channels, channels * 3)
        self.proj = nn.Linear(channels, 64)
        self.scale = (channels // num_heads) ** -0.5
    
    def forward(self, x_list):
        B = x_list[0].shape[0]
        x = torch.cat(x_list, dim=1)
        
        qkv = self.qkv(x).chunk(3, dim=-1)
        q, k, v = map(lambda t: t.reshape(B, -1, self.num_heads, t.shape[-1]//self.num_heads).permute(0, 2, 1, 3), qkv)
        
        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        x = (attn @ v).transpose(1, 2).reshape(B, -1, x.shape[-1])
        
        return self.proj(x.mean(dim=1))

class DynamicFeatureReducer(nn.Module):
    def __init__(self, in_channels):
        super().__init__()
        self.proj = nn.Linear(in_channels, 128)
        self.se = SEBlock(128)
        self.norm = nn.LayerNorm(128)
    
    def forward(self, x):
        x = self.proj(x)
        x = self.norm(x)
        x = self.se(x)
        return x

class vit_base_patch32_model(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        
        # Using a more widely available model
        self.backbone = timm.create_model(
            'vit_base_patch32_clip_448.laion2b_ft_in12k_in1k', 
            pretrained=True,
            num_classes=0
        )
        
        if hasattr(self.backbone, 'set_grad_checkpointing'):
            self.backbone.set_grad_checkpointing(True)
        
        self.hidden_dim = 768
        self.feature_layers = [9, 11]
        
        self.reducers = nn.ModuleList([
            DynamicFeatureReducer(self.hidden_dim) for _ in self.feature_layers
        ])
        
        self.cross_attention = CrossStageAttention(channels=128)
        
        self.classifier = nn.Sequential(
            nn.Linear(64, 128),
            nn.GELU(),
            nn.Dropout(0.1),
            nn.Linear(128, num_classes)
        )
        
        self.temperature = nn.Parameter(torch.ones(1))
    
    def forward_features(self, x):
        x = self.backbone.patch_embed(x)
        x = self.backbone._pos_embed(x)
        x = self.backbone.patch_drop(x)
        x = self.backbone.norm_pre(x)
        
        intermediate_features = {}
        
        for i, block in enumerate(self.backbone.blocks):
            x = block(x)
            if i in self.feature_layers:
                intermediate_features[i] = x
        
        return intermediate_features
    
    def forward(self, x, return_features=False):
        intermediate_features = self.forward_features(x)
        
        reduced_features = []
        for i, layer_idx in enumerate(self.feature_layers):
            feat = intermediate_features[layer_idx]
            reduced = self.reducers[i](feat)
            reduced_features.append(reduced)
        
        x = self.cross_attention(reduced_features)
        
        features = self.classifier[:3](x)
        logits = self.classifier[3:](features)
        logits = logits / self.temperature
        
        if return_features:
            return features
        return logits

def validate_cassava_image(image, model):
    try:
        image = image.resize((448, 448))
        if image.mode != 'RGB':
            image = image.convert('RGB')
        img_array = np.array(image)
        gray_image = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
        mean_intensity = np.mean(gray_image)
        
        if mean_intensity < 50 or mean_intensity > 200:
            return False, None, None
        
        entropy = -np.sum((gray_image / 255.0) * np.log2(gray_image / 255.0 + 1e-10))
        
        if entropy < 3.0:  
            return False, None, None
        
        return True, None, entropy
    
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {str(e)}")
        return False, None, None

@st.cache_resource
def load_model():
    try:
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') 
        model = vit_base_patch32_model(num_classes=5)
        model_path = "streamlit/assets/model/best_model.pth"
        
        if not os.path.exists(model_path):
            st.error(f"Model file not found at {model_path}")
            return None, None
            
        if torch.cuda.is_available():
            checkpoint = torch.load(model_path)
        else:
            checkpoint = torch.load(model_path, map_location='cpu')

        checkpoint = remove_module_prefix(checkpoint)

        try:
            model.load_state_dict(checkpoint)
        except Exception as e:
            st.error(f"Error loading state dict: {str(e)}")
            # Try to print the expected and actual keys
            model_state_dict = model.state_dict()
            st.write("Expected keys:", list(model_state_dict.keys())[:5])
            st.write("Checkpoint keys:", list(checkpoint.keys())[:5])
            return None, None

        model.to(device)
        model.eval()
        return model, device
    except FileNotFoundError:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
        return None, None
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {str(e)}")
        st.write(f"Error details: {type(e).__name__}: {str(e)}")
        import traceback
        st.write("Traceback:", traceback.format_exc())
        return None, None

def preprocess_image(image):
    """Preprocess image for model prediction"""
    transform = transforms.Compose([
        transforms.Resize((448, 448)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    
    if image.mode != 'RGB':
        image = image.convert('RGB')
    
    return transform(image).unsqueeze(0)

def predict_disease(model, image, device):
    try:
        image_tensor = preprocess_image(image).to(device)
        
        with torch.no_grad():
            outputs = model(image_tensor)
            probabilities = torch.nn.functional.softmax(outputs, dim=1)
            predictions = probabilities.cpu().numpy()[0]
        
        class_names = ['CBB', 'CBSD', 'CGM', 'CMD', 'HEALTHY']
        results = dict(zip(class_names, predictions))
        
        return results
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {str(e)}")
        return None

def create_prediction_chart(predictions):
    df = pd.DataFrame(list(predictions.items()), columns=['Disease', 'Probability'])
    df['Probability'] = df['Probability'] * 100
    df = df.sort_values('Probability', ascending=True)
    
    fig = px.bar(df, 
                 x='Probability', 
                 y='Disease',
                 orientation='h',
                 title='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏£‡∏Ñ (%)',
                 color='Probability',
                 color_continuous_scale='RdYlGn_r')
    
    fig.update_layout(
        xaxis_title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (%)",
        yaxis_title="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏£‡∏Ñ",
        font=dict(family="Tahoma", size=12),
        height=400
    )
    
    return fig

def remove_module_prefix(state_dict):
    from collections import OrderedDict
    new_state_dict = OrderedDict()
    for k, v in state_dict.items():
        name = k
        if k.startswith('module.'):
            name = k[7:] 
        new_state_dict[name] = v
    return new_state_dict

def display_image_slider(images, caption=""):
    if not images:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
        return
        
    if f"image_index_{caption}" not in st.session_state:
        st.session_state[f"image_index_{caption}"] = 0
    
    current_index = st.session_state[f"image_index_{caption}"]
    
    col1, col2, col3 = st.columns([1, 4, 1])
    
    with col1:
        if st.button("‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", key=f"prev_{caption}"):
            st.session_state[f"image_index_{caption}"] = (current_index - 1) % len(images)
            st.rerun()
    
    with col2:
        img = Image.open(images[current_index])
        st.image(img, caption=caption, use_container_width=True)
    
    with col3:
        if st.button("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°Ô∏è", key=f"next_{caption}"):
            st.session_state[f"image_index_{caption}"] = (current_index + 1) % len(images)
            st.rerun()
    
    st.write(f"‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà {current_index + 1} ‡∏à‡∏≤‡∏Å {len(images)}")

def get_location_js():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô Geolocation API
    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ lat, lon ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session_state
    """
    return """
    <script>
    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    const data = {
                        lat: position.coords.latitude,
                        lon: position.coords.longitude,
                        timestamp: new Date().toISOString()
                    };
                    window.parent.postMessage({
                        type: "streamlit:setLocationData",
                        data: data
                    }, "*");
                },
                function(error) {
                    console.error("Error getting location:", error);
                    window.parent.postMessage({
                        type: "streamlit:locationError",
                        error: error.message
                    }, "*");
                }
            );
        } else {
            console.error("Geolocation is not supported by this browser.");
        }
    }
    </script>
    <button onclick="getLocation()" style="
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 4px;
    ">‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</button>
    """

def get_historical_weather(lat, lon, date, api_key):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å WeatherAPI.com
    
    Args:
        lat (float): ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î
        lon (float): ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î
        date (str): ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (YYYY-MM-DD)
        api_key (str): API key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WeatherAPI.com
    
    Returns:
        dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {avg_temp, avg_humidity, total_rainfall}
    """
    end_date = datetime.strptime(date, "%Y-%m-%d")
    start_date = end_date - timedelta(days=7)
    
    url = f"http://api.weatherapi.com/v1/history.json"
    
    total_temp = 0
    total_humidity = 0
    total_rainfall = 0
    days_counted = 0
    
    current_date = start_date
    while current_date <= end_date:
        params = {
            'key': api_key,
            'q': f"{lat},{lon}",
            'dt': current_date.strftime("%Y-%m-%d")
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            if 'forecast' in data and 'forecastday' in data['forecast']:
                day_data = data['forecast']['forecastday'][0]['day']
                total_temp += day_data['avgtemp_c']
                total_humidity += day_data['avghumidity']
                total_rainfall += day_data['totalprecip_mm']
                days_counted += 1
            
        except Exception as e:
            st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {current_date.strftime('%Y-%m-%d')}: {str(e)}")
        
        current_date += timedelta(days=1)
    
    if days_counted > 0:
        return {
            'avg_temp': total_temp / days_counted,
            'avg_humidity': total_humidity / days_counted,
            'total_rainfall': total_rainfall
        }
    return None

def load_weather_rules():
    """Load weather rules from CSV file"""
    try:
        rules_df = pd.read_csv('streamlit/assets/weather_rules.csv')
        return rules_df
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {str(e)}")
        return None

def evaluate_weather_rules(predicted_disease, weather_data, rules_df):
    """Evaluate weather conditions against rules for the predicted disease"""
    if rules_df is None or weather_data is None:
        return []
    
    recommendations = []
    
    # Filter rules for the predicted disease
    disease_rules = rules_df[rules_df['‡πÇ‡∏£‡∏Ñ/‡∏™‡∏†‡∏≤‡∏ß‡∏∞'].str.contains(predicted_disease, na=False)]
    
    for _, rule in disease_rules.iterrows():
        param = rule['‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏´‡∏•‡∏±‡∏Å']
        condition = rule['‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°/‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ/‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û)']
        risk = rule['‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞']
        note = rule['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏/‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞']
        
        # Check temperature conditions
        if '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥' in param:
            temp_range = condition.replace('¬∞C', '').replace(' ', '').split('-')
            if len(temp_range) == 2:
                min_temp, max_temp = map(float, temp_range)
                if min_temp <= weather_data['avg_temp'] <= max_temp:
                    recommendations.append(f"üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {weather_data['avg_temp']:.1f}¬∞C ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ ({risk})")
        
        # Check humidity conditions
        if '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô' in param:
            if '‡∏™‡∏π‡∏á' in condition and weather_data['avg_humidity'] >= 80:
                recommendations.append(f"üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {weather_data['avg_humidity']:.1f}% ‡∏™‡∏π‡∏á ‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ ({risk})")
        
        # Check rainfall conditions
        if '‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô' in param:
            if '‡∏™‡∏π‡∏á' in condition and weather_data['total_rainfall'] > 50:  # Threshold can be adjusted
                recommendations.append(f"üåßÔ∏è ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô‡∏£‡∏ß‡∏° {weather_data['total_rainfall']:.1f}mm ‡∏™‡∏π‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ ({risk})")
            elif '‡∏ï‡πà‡∏≥' in condition and weather_data['total_rainfall'] < 10:
                recommendations.append(f"‚òÄÔ∏è ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô‡∏£‡∏ß‡∏° {weather_data['total_rainfall']:.1f}mm ‡∏ï‡πà‡∏≥ ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ ({risk})")
        
        if note and recommendations:
            recommendations[-1] += f"\n‚ÑπÔ∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {note}"
    
    return recommendations

def main():
    load_css()
    st.markdown('<div class="farmer-emoji">üå±üë®‚Äçüåæüå±</div>', unsafe_allow_html=True)
    st.title("üåø ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á")
    st.markdown("### üî¨ AI Image Classification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡πÑ‡∏ó‡∏¢")
    st.markdown("##### üôÖ ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á")

    # Initialize session state for location data
    if 'location_data' not in st.session_state:
        st.session_state.location_data = None

    st.sidebar.markdown("## üì± ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.sidebar.markdown("""
    1. üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    2. üìç ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
    3. ü§ñ AI ‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ
    4. üìä ‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    """)

    with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI..."):
        model, device = load_model()

    if model is None:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ")
        return

    # Load weather rules
    rules_df = load_weather_rules()

    st.markdown("## üì∏ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á")
    upload_option = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î:",
        ["üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á", "üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á"]
    )

    uploaded_file = None
    if upload_option == "üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á":
        uploaded_file = st.file_uploader(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á",
            type=['jpg', 'jpeg', 'png'],
            help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JPG, JPEG, PNG"
        )
    else:
        camera_image = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á")
        if camera_image is not None:
            uploaded_file = camera_image

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        
        # Location and date input
        st.markdown("## üìç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤")
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown("### üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û")
            st.markdown(get_location_js(), unsafe_allow_html=True)
            
            # Manual location input
            manual_lat = st.number_input("‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î", value=None, placeholder="‡πÄ‡∏ä‡πà‡∏ô 13.7563")
            manual_lon = st.number_input("‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î", value=None, placeholder="‡πÄ‡∏ä‡πà‡∏ô 100.5018")
            
            # Use location from either automatic or manual input
            lat = st.session_state.location_data['lat'] if st.session_state.location_data else manual_lat
            lon = st.session_state.location_data['lon'] if st.session_state.location_data else manual_lon
        
        with col2:
            st.markdown("### üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û")
            image_date = st.date_input(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                value=datetime.now().date(),
                max_value=datetime.now().date()
            )

        # Get weather data if location is available
        weather_data = None
        if lat is not None and lon is not None:
            weather_data = get_historical_weather(lat, lon, image_date.strftime("%Y-%m-%d"), WEATHER_API_KEY)

        col1, col2 = st.columns([1, 1])

        with col1:
            st.markdown("### üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î")
            st.image(image)

        with col2:
            st.markdown("### üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            with st.spinner("ü§ñ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
                is_valid, confidence_score, entropy = validate_cassava_image(image, model)
                if not is_valid or (confidence_score is not None and confidence_score < 0.5):
                    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥")
                    st.warning("""
                        ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤:
                        - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏£‡∏¥‡∏á
                        - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠
                        - ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö
                        """)
                    return
                probabilities = predict_disease(model, image, device)
                if probabilities is not None:
                    predicted_class = max(probabilities, key=probabilities.get)
                else:
                    predicted_class = None

            if predicted_class is not None:
                disease_info = DISEASE_INFO[predicted_class]
                confidence = probabilities[predicted_class] * 100
                if predicted_class == 'HEALTHY':
                    card_class = "disease-card healthy-card"
                elif disease_info['severity'] == '‡∏™‡∏π‡∏á':
                    card_class = "disease-card disease-severe"
                else:
                    card_class = "disease-card"
                st.markdown(f"""
                <div class="{card_class}">
                    <h3>{disease_info['thai_name']}</h3>
                    <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå:</strong> {disease_info['name']}</p>
                    <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô:</strong> {confidence:.1f}%</p>
                    <div class="confidence-bar">
                        <div class="confidence-fill" style="width: {confidence}%"></div>
                    </div>
                </div>
                """, unsafe_allow_html=True)

                # Display weather data and recommendations
                if weather_data:
                    st.markdown("### üå§Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô")
                    st.markdown(f"""
                    - üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {weather_data['avg_temp']:.1f}¬∞C
                    - üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {weather_data['avg_humidity']:.1f}%
                    - üåßÔ∏è ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô‡∏£‡∏ß‡∏°: {weather_data['total_rainfall']:.1f}mm
                    """)

                    # Evaluate weather rules
                    weather_recommendations = evaluate_weather_rules(predicted_class, weather_data, rules_df)
                    if weather_recommendations:
                        st.markdown("### ‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
                        for rec in weather_recommendations:
                            st.markdown(f"- {rec}")

        st.markdown("## üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        if predicted_class is not None:
            disease_info = DISEASE_INFO[predicted_class]
            col1, col2 = st.columns([1, 1])
            with col1:
                st.markdown("### üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢")
                st.write(disease_info['description'])
                st.markdown("### üî¨ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£")
                st.write(disease_info['symptoms'])
            with col2:
                st.markdown("### üíä ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤/‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô")
                st.write(disease_info['treatment'])
                if disease_info['severity'] != '‡πÑ‡∏°‡πà‡∏°‡∏µ':
                    st.markdown(f"### ‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á: {disease_info['severity']}")

    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 20px;">
        üåæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á <br>
        ‚ö†Ô∏è <em>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</em>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 